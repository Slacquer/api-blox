using System.Linq;
using APIBlox.NetCore;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

// ReSharper disable once CheckNamespace
namespace APIBlox.AspNetCore.Filters
{
    internal class EnsurePaginationResponseResultActionFilter : EnsureResponseResultActionFilter
    {
        // TODO: If and when the time comes, make me real...

        public EnsurePaginationResponseResultActionFilter(
            ILoggerFactory loggerFactory
        )
            : base(loggerFactory)
        {
        }

        protected override void Handle(ObjectResult result)
        {
            if (!ResultValueIsEnumerable)
                return;

            var value = result.Value;
            var type = value.GetType();
            var prop = type.GetProperties().First();
            var pagination = new Pagination();
            var dynamicResult = new DynamicDataObject();
            var propValue = prop.GetValue(value);

            dynamicResult.AddProperty(prop.Name, propValue).AddProperty("Pagination", pagination);

            result.Value = dynamicResult;
        }

        private class Pagination
        {
            /// <summary>
            ///     Gets or sets the next.
            /// </summary>
            /// <value>The next.</value>
            /// <autogeneratedoc />
            public string Next { get; set; } = "https://foo.com/nextPage";

            /// <summary>
            ///     Gets or sets the previous.
            /// </summary>
            /// <value>The previous.</value>
            /// <autogeneratedoc />
            public string Previous { get; set; } = "https://foo.com/firstPage";

            /// <summary>
            ///     Gets or sets the total count.
            /// </summary>
            /// <value>The total count.</value>
            /// <autogeneratedoc />
            public int TotalCount { get; set; }
        }
    }
}
