using System;
using APIBlox.AspNetCore;
using APIBlox.AspNetCore.Contracts;
using APIBlox.AspNetCore.Extensions;
using Microsoft.Extensions.DependencyInjection.Extensions;

// ReSharper disable once CheckNamespace
namespace Microsoft.Extensions.DependencyInjection
{
    /// <summary>
    ///     Class MvcBuilderExtensions.
    /// </summary>
    public static class MvcBuilderExtensions
    {
        /// <summary>
        ///     IMvcBuilder extension method for adding the required mvc feature and conventions for dynamic controllers.
        ///     <para>
        ///         Be sure to add me as close to the beginning of the builder chain as possible.
        ///     </para>
        /// </summary>
        /// <param name="builder">The builder.</param>
        /// <param name="configs">The configs.</param>
        /// <param name="addPostLocationHeaderResultFilter">if set to <c>true</c> [add post location header result filter].</param>
        /// <returns>IMvcBuilder.</returns>
        /// <autogeneratedoc />
        public static IMvcBuilder AddDynamicControllersFeature(
            this IMvcBuilder builder,
            Action<IDynamicControllerConfigurations> configs, bool addPostLocationHeaderResultFilter = true
        )
        {
            var configurations = new DynamicControllerConfigurationsService();
            builder.Services.TryAddSingleton<IInternalDynamicControllerConfigurationsService>(configurations);
            configs(configurations);

            if (addPostLocationHeaderResultFilter)
                builder.AddFilter<PostLocationHeaderResultFilter>();

            builder.AddConvention<DynamicControllersRouteConvention>()
                .AddConvention<DynamicControllerSubRouteConvention>()
                .AddConvention<DynamicControllersConvertResponseTypeConvention>()
                .AddConvention<DynamicControllerActionParametersConvention>();

            builder.ConfigureApplicationPartManager(setup =>
                setup.FeatureProviders.TryAdd(new DynamicControllerFeatureProvider(configurations))
            );

            return builder;
        }

        /// <summary>
        ///     IMvcCoreBuilder extension method for adding the required mvc feature and conventions
        ///     for dynamic controllers.  Will also call <see cref="IMvcCoreBuilder" />
        ///     .AddJsonFormatters().AddDataAnnotations() extension methods.
        ///     <para>
        ///         Be sure to add me as close to the beginning of the builder chain as possible.
        ///     </para>
        /// </summary>
        /// <param name="builder">The builder.</param>
        /// <param name="configs">The configs.</param>
        /// <param name="addPostLocationHeaderResultFilter">if set to <c>true</c> [add post location header result filter].</param>
        /// <returns>IMvcCoreBuilder.</returns>
        /// <autogeneratedoc />
        public static IMvcCoreBuilder AddDynamicControllersFeature(
            this IMvcCoreBuilder builder,
            Action<IDynamicControllerConfigurations> configs, bool addPostLocationHeaderResultFilter = true
        )
        {
            var configurations = new DynamicControllerConfigurationsService();
            builder.Services.TryAddSingleton<IInternalDynamicControllerConfigurationsService>(configurations);
            configs(configurations);

            if (addPostLocationHeaderResultFilter)
                builder.AddFilter<PostLocationHeaderResultFilter>();

            builder.AddConvention<DynamicControllersRouteConvention>()
                .AddConvention<DynamicControllerSubRouteConvention>()
                .AddConvention<DynamicControllersConvertResponseTypeConvention>();

            builder.ConfigureApplicationPartManager(setup =>
                setup.FeatureProviders.TryAdd(new DynamicControllerFeatureProvider(configurations))
            );

            return builder.AddJsonFormatters().AddDataAnnotations();
        }

        /// <summary>
        ///     Designed for usage with Dynamic controllers, and adds a command/query binder action filter.
        /// </summary>
        /// <param name="builder">The mvc builder.</param>
        /// <returns>IMvcBuilder.</returns>
        public static IMvcBuilder AddPopulateGenericRequestObjectActionFilter(this IMvcBuilder builder)
        {
            return builder.AddFilter<PopulateGenericRequestObjectActionFilter>();
        }

        /// <summary>
        ///     Designed for usage with Dynamic controllers, and adds a command/query binder action filter.
        /// </summary>
        /// <param name="builder">The mvc core builder.</param>
        /// <returns>IMvcCoreBuilder.</returns>
        public static IMvcCoreBuilder AddPopulateGenericRequestObjectActionFilter(this IMvcCoreBuilder builder)
        {
            return builder.AddFilter<PopulateGenericRequestObjectActionFilter>();
        }
    }
}
