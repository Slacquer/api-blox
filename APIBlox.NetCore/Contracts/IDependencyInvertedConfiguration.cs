using APIBlox.NetCore.Attributes;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace APIBlox.NetCore.Contracts
{
    /// <summary>
    ///     Interface IDependencyInvertedConfiguration for assemblies that contain services that follow the
    ///     Dependency Inversion Principal, and do not or can not be created
    ///     solely using the <see cref="InjectableServiceAttribute" />
    /// </summary>
    /// <remarks>
    ///     Dependency Inversion Principal:
    ///     ...Implementations depend on abstractions, not vice versa...  IE: application layer
    ///     holds the contract (abstraction) but persistence layer has the implementation, therefore
    ///     the application layer would NEVER have a reference to the persistence assembly, using DIP, the
    ///     flow however would appear that the application layer DOES have a reference to the persistence assembly.
    /// </remarks>
    public interface IDependencyInvertedConfiguration
    {
        /// <summary>
        ///     Configures services
        /// </summary>
        /// <param name="services">The services.</param>
        /// <param name="configuration">The configuration.</param>
        /// <param name="loggerFactory">The logger factory.</param>
        /// <param name="environment">The environment.</param>
        /// <autogeneratedoc />
        void Configure(
            IServiceCollection services, IConfiguration configuration,
            ILoggerFactory loggerFactory, string environment
        );
    }
}
