/// <summary>
///     Action for creating a resource.
/// </summary>
/// <remarks>
///     Possible Response Status Codes: <a href="https://httpstatuses.com/201">201</a>, <a href="https://httpstatuses.com/401">401</a>, <a href="https://httpstatuses.com/403">403</a>, <a href="https://httpstatuses.com/404">404</a>, <a href="https://httpstatuses.com/409">409</a>
/// </remarks>
/// <response code="201">Success, resulting in a new [RES_OBJECT_RESULT].</response>
/// <response code="401">Unauthorized, You are not authenticated, meaning not authenticated at all or authenticated incorrectly.</response>
/// <response code="403">Forbidden, You have successfully been authenticated, yet you do not have permission (authorization) to access the requested resource.</response>
/// <response code="404">NotFound, The resource was not found using the supplied input parameters.</response>
/// <response code="409">Conflict, The supplied input parameters would cause a data violation.</response>
/// <param name="cancellationToken">The cancellation token.</param>
[PARAMS_COMMENTS]
[HttpPost("[ACTION_ROUTE]")]
[Produces("application/json", "application/problem+json")]
[Consumes("application/json")]
[ProducesErrorResponseType(typeof(RequestErrorObject))]
[ProducesResponseType(typeof([RES_OBJECT_RESULT]), StatusCodes.Status201Created)]
[ProducesResponseType(StatusCodes.Status204NoContent)]
[ProducesResponseType(StatusCodes.Status401Unauthorized)]
[ProducesResponseType(StatusCodes.Status403Forbidden)]
[ProducesResponseType(StatusCodes.Status404NotFound)]
[ProducesResponseType(StatusCodes.Status409Conflict)]
public async Task<IActionResult> [CONTROLLER_NAME]Post[REQ_OBJECT](
    [ACTION_PARAMS]
    CancellationToken cancellationToken
)
{
    var ret = await _postBy[REQ_OBJECT]Handler.HandleAsync(
        [NEW_REQ_OBJECT], 
        cancellationToken
    ).ConfigureAwait(false);

	if (ret is null)
		throw new ArgumentException($"You must return a {nameof(HandlerResponse)} instance!");

    var errorResult = ret.HasErrors ? new ProblemResult(ret.Error) : null;

    if (errorResult is null && ret.Result is null)
        throw new NullReferenceException(
            "When responding to a POST you must either set an error or pass some results!"
        );

    if (!(errorResult is null))
        return errorResult;

    var id = FindId(ret.Result);

    return Equals(id, -1) ? Ok(ret.Result) : CreatedAtRoute(new {id}, ret.Result);
}