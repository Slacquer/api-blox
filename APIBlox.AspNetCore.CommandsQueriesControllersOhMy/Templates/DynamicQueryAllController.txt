[NAMESPACES]

namespace [CONTROLLERS_NAMESPACE].Controllers
{
    /// <inheritdoc />
    /// <summary>
    ///     Class [CONTROLLER_NAME].
    /// </summary>
    /// <seealso cref="Microsoft.AspNetCore.Mvc.ControllerBase" />
    [Route("[CONTROLLER_ROUTE]")]
    [ApiController]
    public sealed class [CONTROLLER_NAME] : ControllerBase
    {
        private readonly IQueryHandler<[REQ_OBJECT], HandlerResponse> _getAllHandler;

		/// <summary>
        ///     Initializes a new instance of the <see cref="[CONTROLLER_NAME]" /> class.
        /// </summary>
        /// <param name="getAllHandler">The handler used to for querying [RES_OBJECT_INNER_RESULT].</param>
        public [CONTROLLER_NAME](IQueryHandler<[REQ_OBJECT], HandlerResponse> getAllHandler)
        {
            _getAllHandler = getAllHandler;
        }

		/// <summary>
        ///     Action for getting a collection of [RES_OBJECT_INNER_RESULT] resources.
        /// </summary>
        /// <remarks>
        ///     Possible Response Status Codes: <a href="https://httpstatuses.com/200">200</a>, <a href="https://httpstatuses.com/204">204</a>, <a href="https://httpstatuses.com/401">401</a>, <a href="https://httpstatuses.com/403">403</a>
        /// </remarks>
        /// <response code="200">Success, with an array of results.</response>
        /// <response code="204">Success, no results.</response>
        /// <response code="401">Unauthorized, You are not authenticated, meaning not authenticated at all or authenticated incorrectly.</response>
        /// <response code="403">Forbidden, You have successfully been authenticated, yet you do not have permission (authorization) to access the requested resource.</response>
        /// <param name="cancellationToken">The cancellation token.</param>
        [PARAMS_COMMENTS]
        [HttpGet("[ACTION_ROUTE]")]
		[Produces("application/json")]
		[Consumes("application/json")]
        [ProducesResponseType(typeof([RES_OBJECT_RESULT]), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        public async Task<IActionResult> QueryAll(
            [ACTION_PARAMS]
			CancellationToken cancellationToken
        )
        {
            var ret = await _getAllHandler.HandleAsync(
                [NEW_REQ_OBJECT], 
                cancellationToken
            ).ConfigureAwait(false);

            if (ret.HasErrors)
                return new ProblemResult(ret.Error);

            if (ret.Result is null)
                throw new ArgumentNullException(
                    nameof(HandlerResponse.Result),
                    "When responding to a GET you must either set an error or pass a result!"
                );

            return Ok(ret.Result);
        }
    }
}
