[NAMESPACES]

namespace SomeNameSpace.Controllers
{
    [Route("[CONTROLLER_ROUTE]")]
    [ApiController]
    public sealed class [CONTROLLER_NAME] : ControllerBase
    {
        private readonly IQueryHandler<[REQ_OBJECT], HandlerResponse> _getAllHandler;

        public [CONTROLLER_NAME](IQueryHandler<[REQ_OBJECT], HandlerResponse> getAllHandler)
        {
            _getAllHandler = getAllHandler;
        }

        [HttpGet[ACTION_ROUTE]]
        [ProducesResponseType(typeof([RES_OBJECT_RESULT]), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        public async Task<IActionResult> QueryAll(
            [ACTION_PARAMS], 
            CancellationToken cancellationToken
        )
        {
            var ret = await _getAllHandler.HandleAsync(
                [NEW_REQ_OBJECT], 
                cancellationToken
            ).ConfigureAwait(false);

            if (ret.HasErrors)
                return new ProblemResult(ret.Error);

            if (ret.Result is null)
                throw new NullReferenceException(
                    "When responding to a GET you must either set an error or pass a result!"
                );

            return Ok(ret.Result);
        }
    }
}
